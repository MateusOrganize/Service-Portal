<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2020-11-13 19:34:14">
<sys_script_include action="INSERT_OR_UPDATE">
<access>public</access>
<active>true</active>
<api_name>global.chartUtils</api_name>
<caller_access/>
<client_callable>false</client_callable>
<description/>
<name>chartUtils</name>
<script><![CDATA[var chartUtils = Class.create();
chartUtils.prototype = {

	/**SNDOC
	@name initialize
    @description Constructor method of chartUtils
    @param {String} [report] - report sys id 
    @param {String} [filter] - encoded query
    @example

	var report = 'cc5288862f54a010c5d33f96f699b689';
    var list = 'active=true';
	*/
	initialize: function(report, filter) {
		this.input_filter = filter;
		this.gr = new GlideRecord('sys_report');
		this.gr.get(report);
		this.options = this.chartOptions();
		this.chartType = this.getType();
	},

	/**SNDOC
	@name chartOptions
    @description Get the report configuration values 
    @returns {object} Object containing the report configuration values
    @example

    var chart = new chartUtils('cc5288862f54a010c5d33f96f699b689','active=true');
	var options = chart.chartOptions();

	//Output:
	 {
		agg: "COUNT",
		color: "de699435d7033100b4964ebfae610331",
		field: "state",
		filter: "",
		interval: "year",
		roles: "public",
		sum_field: null,
		table: "incident",
		title: "Test Line",
		trend_field: "resolved_at",
		type: "area"
	 }
	*/
	chartOptions: function(){
		var obj = {
			title: this.gr.getValue('title'),
			table: this.gr.getValue('table'),
			field: this.gr.getValue('field'),
			type: this.gr.getValue('type'),
			filter: this.gr.getValue('filter') || '',
			roles: this.gr.getValue('roles'),
			sum_field: this.gr.getValue('sumfield'),
			trend_field: this.gr.getValue('trend_field'),
			interval: this.gr.getValue('interval'),
			agg: this.gr.getValue('aggregate'),
			color: this.gr.getValue('color')
		};

		var source = this.gr.getValue('report_source');
		if(!gs.nil(source)){
			var grSource = new GlideRecord('sys_report_source');
			grSource.get(source);
			obj.filter += "^" + grSource.getValue('filter');
		}

		if(!gs.nil(this.input_filter))
			obj.filter += this.input_filter;

		return obj;
	},
	
	/**SNDOC
	@name getChart
    @description Get the chart data 
    @returns {object} Object containing the series and categories 
    @example

    var chart = new chartUtils('cc5288862f54a010c5d33f96f699b689','active=true');
	var chartData = chart.getChart();

	//Output:
	 {
		categories:["", "2016", "2018", "2020"],
		series:[
			{data: [1,2], name: "New"},
			{data: [3,2,4], name: "In Progress"},
			{data: [3,2,4], name: "On Hold"},
			{data: [1,2], name: "Closed"}
		]
	 }
	*/
	getChart: function(){
		var result = '';
		var chart_data = new chartData(this.options);

		switch(this.chartType){
			case 'bar':
				(this.trendData() ? result = chart_data.getRectangles() : result = chart_data.getStackRectangles()); break;
			case 'column':
				(this.trendData() ? result = chart_data.getRectangles() : result = chart_data.getStackRectangles()); break;
			case 'pie':
				result = chart_data.getCircles(); break;
			case 'line':
				result = chart_data.getLines(); break;
			case 'area':
				result = chart_data.getLines(); break;
		}
		return result;
	},

	/**SNDOC
	@name trendData
    @description Verify if this chart is stacked
    @returns {Boolean}
	*/
	trendData: function(){
		if(gs.nil(this.options.trend_field))
			return true;
		return false;
	},

	/**SNDOC
	@name getColor
    @description Get the chart color
    @returns {String} Returns a hexadecimal code 
	*/
	getColor: function(){
		if(this.gr.getValue('set_color') == 'color_palette')
			return;

		var gr = new GlideRecord("sys_report_color");
		gr.get(this.options.color);
		return gr.getValue('color');
	},

	/**SNDOC
	@name getType
    @description Convert the ServiceNow type to HighChart type
    @returns {String} Chart type
	*/
	getType: function(){
		var types = ['horizontal_bar','bar','line','donut','semi_donut','pie','area'];
		var index = types.indexOf(this.options.type);

		switch (types[index]) {
			case 'horizontal_bar':
				return 'bar';
			case 'bar':
				return 'column';
			case 'donut':
				return 'pie';
			case 'semi_donut':
				return 'pie';
			case 'pie':
				return 'pie';
			case 'line':
				return 'line';
			case 'area':
				return 'area';
			default:
				gs.addInfoMessage('Este modelo de gráfico não é aceito.');
		}
		return '';
	},

	/**SNDOC
	@name getOptionsType
    @description Get the ServiceNow type
    @returns {String} Chart type
	*/
	getOptionsType: function(){
		return this.options.type;
	},

	type: 'chartUtils'
};]]></script>
<sys_class_name>sys_script_include</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2020-11-03 18:00:22</sys_created_on>
<sys_id>7319544d2f102010c5d33f96f699b667</sys_id>
<sys_mod_count>141</sys_mod_count>
<sys_name>chartUtils</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sys_script_include_7319544d2f102010c5d33f96f699b667</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2020-11-11 17:16:39</sys_updated_on>
</sys_script_include>
</unload>
